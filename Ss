#include <bits/stdc++.h>
using namespace std;

void primMST(int n, vector<vector<pair<int, int>>>& graph) {
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;
    vector<bool> visited(n, false);
    vector<int> parent(n, -1);
    vector<int> key(n, INT_MAX); // Store min weight for each vertex
    int totalCost = 0;

    pq.push({0, 0}); // Start from node 0
    key[0] = 0;

    while (!pq.empty()) {
        auto [cost, u] = pq.top();
        pq.pop();

        if (visited[u]) continue;
        visited[u] = true;
        totalCost += cost;

        if (parent[u] != -1)
            cout << "Connect office " << parent[u] << " to " << u << " with cost " << cost << endl;

        for (auto [v, weight] : graph[u]) {
            if (!visited[v] && weight < key[v]) {
                key[v] = weight;
                pq.push({weight, v});
                parent[v] = u;
            }
        }
    }

    cout << "Total Minimum Cost: " << totalCost << endl;
}

int main() {
    int n, m;
    cout << "Enter the number of offices: ";
    cin >> n;
    cout << "Enter the number of connections: ";
    cin >> m;

    vector<vector<pair<int, int>>> graph(n);

    cout << "Enter connections (office1 office2 cost):\n";
    for (int i = 0; i < m; i++) {
        int u, v, cost;
        cin >> u >> v >> cost;
        graph[u].push_back({v, cost});
        graph[v].push_back({u, cost});
    }

    cout << "\nMinimum Spanning Tree (MST) using Prim's Algorithm:\n";
    primMST(n, graph);

    return 0;
}
